#!/bin/bash

############
# Check for Parallels Tools updates for all the Windows VMs
#
# This script will check for updates for all the Windows VMs
# and return true or false
#
#
############
USER=$(stat -f%Su /dev/console)

function check_for_requirements() {
  prlctl_installed=$(which prlctl)
  if [[ -z "$prlctl_installed" ]]; then
    echo "<result>prlctl is not installed</result>"
    exit 1
  fi

  # Check if jq is installed
  if [[ ! -f "/tmp/jq" ]]; then
    if [ "$VERBOSE" = "true" ]; then
      echo "<result>jq is not installed. Installing temporary version...</result>"
    fi

    curl -Ls -o /tmp/jq https://github.com/jqlang/jq/releases/download/jq-1.7.1/jq-macos-arm64
    chmod +x /tmp/jq
    xattr -dr com.apple.quarantine /tmp/jq
  fi
}

function list_vms() {
  VMS=$(sudo -u $USER prlctl list -a -i --json | /tmp/jq -r 'map(select((.OS == "win-10" or .OS == "win-11" or .OS=="ubuntu") and .State == "running") | {id:.ID, name: .Name, tools_state: .GuestTools.state})')
  echo "$VMS"
}

check_for_requirements
if [ $? -ne 0 ]; then
  echo "<result>Error: Failed to check for requirements</result>"
  exit 1
fi

VMS=$(list_vms)

if [ ${#VM_ARRAY[@]} -eq 0 ]; then
  VM_ARRAY=()
  while IFS= read -r line; do
    VM_ARRAY+=("$line")
  done < <(echo "$VMS" | /tmp/jq -c '.[]')
fi

if [ ${#VM_ARRAY[@]} -eq 0 ]; then
  echo "<result>No running Windows VMs found</result>"
  exit 0
fi

# Initialize an empty JSON array to store all VM update information
ALL_UPDATES=()

for VM in "${VM_ARRAY[@]}"; do
  vm_id=$(echo "$VM" | /tmp/jq -r '.id')
  vm_name=$(echo "$VM" | /tmp/jq -r '.name')
  tools_state=$(echo "$VM" | /tmp/jq -r '.tools_state')

  last_exit_code=$?
  if [ $last_exit_code -ne 0 ] && [ $last_exit_code -ne 2 ]; then
    echo "<result>Error: Failed to get updates for $vm_name ($vm_id)</result>"
    exit 1
  fi
  HAS_TOOLS_UPDATE="false"
  if [ "$tools_state" = "outdated" ]; then
    HAS_TOOLS_UPDATE="true"
  fi

  # Build a JSON object with name, id, and a boolean indicating if updates are available
  vm_update_status=$(/tmp/jq -n \
    --arg name "$vm_name" \
    --arg id "$vm_id" \
    --argjson has_tools_update "$HAS_TOOLS_UPDATE" \
    '{name: $name, id: $id, has_tools_update: $has_tools_update}')

  if [ "$VERBOSE" = "true" ]; then
    if [ "$HAS_UPDATES" = "true" ]; then
      echo "<result>$vm_name has updates available</result>"
    else
      echo "<result>$vm_name has no updates available</result>"
    fi
  fi
  ALL_UPDATES+=("$vm_update_status")
done

# Process the array and output VM update status in a human-readable format

# LINES=$(printf '%s\n' "${ALL_UPDATES[@]}" | /tmp/jq -s '.[] | "\(.name): \(if .has_tools_update then "Has PD Tools Updates" else "Up-to-Date" end)"' | sed 's/^"//;s/"$//' | tr '\n' ',' | sed 's/,$//')
LINES=$(printf '%s\n' "${ALL_UPDATES[@]}" | /tmp/jq -s '.[] | "\(.name): \(if .has_tools_update then "Has PD Tools Updates" else "Up-to-Date" end)"' | sed 's/^"//;s/"$//' | sed 's/,$//')

echo "<result>${LINES[*]}</result>"
